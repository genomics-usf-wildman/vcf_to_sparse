#!/usr/bin/perl
# vcf_to_sparse Converts VCF files to sparse matrix formats
# and is released under the terms of the GNU GPL version 3, or any
# later version, at your option. See the file README and COPYING for
# more information.
# Copyright 2014 by Don Armstrong <don@donarmstrong.com>.


use warnings;
use strict;

use Getopt::Long;
use Pod::Usage;

=head1 NAME

vcf_to_sparse - Converts VCF files to sparse matrix formats

=head1 SYNOPSIS

vcf_to_sparse [options]

 Options:
   --format, -f output format (Default cluto)
   --output, -o output file (Default STDOUT)
   --variant-info-output, -r variant information output file (Default no output)
   --sample-info-output, -c column information output file (Default no output)
   --debug, -d debugging level (Default 0)
   --help, -h display this help
   --man, -m display manual

=head1 OPTIONS

=over

=item B<--format, -f>

Sparse Matrix output format. Valid options are cluto and ccs. Defaults
to cluto.

=item B<--output, -o>

Sparse matrix output file. Will output to STDOUT if not defined.

=item B<--debug, -d>

Debug verbosity. (Default 0)

=item B<--help, -h>

Display brief usage information.

=item B<--man, -m>

Display this manual.

=back

=head1 EXAMPLES

vcf_to_sparse

=cut


use vars qw($DEBUG);

use IO::Uncompress::AnyUncompress;
use Sort::Naturally;

my %options = (debug           => 0,
               help            => 0,
               man             => 0,
               format          => 'cluto',
              );

GetOptions(\%options,
           'format|f=s',
           'output|o=s',
           'variant_info_output|variant-info-output|r=s',
           'sample_info_output|sample-info-output|r=s',
           'debug|d+','help|h|?','man|m');

pod2usage() if $options{help};
pod2usage({verbose=>2}) if $options{man};

$DEBUG = $options{debug};

my @USAGE_ERRORS;
if ($options{format} !~ /^(cluto|ccs)$/i) {
    push @USAGE_ERRORS,"$options{format} is not a valid sparse matrix format (ccs or cluto)";
}

pod2usage(join("\n",@USAGE_ERRORS)) if @USAGE_ERRORS;

my @fh;
if (not @ARGV) {
    push @fh,IO::Uncompress::AnyUncompress->new(\*STDIN) or
        die "Unable to open STDIN for reading: $IO::Uncompress::AnyUncompressError";
} else {
    for my $file (@ARGV) {
        push @fh, IO::Uncompress::AnyUncompress->new($file,MultiStream => 1) or
            die "Unable to open $file for reading: $IO::Uncompress::AnyUncompressError";
    }
}

## open output files

my $output_fh = \*STDOUT;
if (defined $options{output}) {
    $output_fh = _open_file_w($options{output});
}
my $variant_info_output = _open_file_w($options{variant_info_output}) if
    defined $options{variant_info_output};
my $sample_info_output = _open_file_w($options{sample_info_output}) if
    defined $options{sample_info_output};

my @vcf_info;
# read vcf header
for my $i (0..$#fh) {
    print STDERR "parsing vcf header of $ARGV[$i]" if $DEBUG;
    $vcf_info[$i] =
        read_vcf_header($fh[$i]);
    print STDERR " parsed \n" if $DEBUG;
}

use Data::Printer;
my %sample_ordering;

determine_sample_ordering(\@vcf_info,\%sample_ordering);

output_sample_descriptors($sample_ordering{order},$sample_info_output) if
    defined $sample_info_output;

my %current_variant;

# read vcf files and output combined columns
my $all_finished = 0;
while (not $all_finished) {
    $all_finished = 1;
    for my $i (0..$#vcf_info) {
        # read a new line in if there isn't one already in queue
        my $read_a_line = read_current_line($vcf_info[$i]);
        # parse the current variants
        if ($read_a_line) {
            $all_finished = 0;
            parse_current_variant($vcf_info[$i]);
        }
    }
    # output the current variants
    my $all_output =
        output_current_variant(\@vcf_info,
                               $options{format},
                               \%current_variant,
                               \%sample_ordering,
                               $output_fh,
                               $variant_info_output,
                              );
    if (not $all_output) {
        $all_finished = 0;
    }
}

for ($output_fh,$variant_info_output,$sample_info_output) {
    close($_) if defined $_;
}

## end of program flow

sub _open_file_w {
    my $fh = IO::File->new($_[0],'w') or
        die "Unable to open $_[0] for writing: $!";
    return $fh;
}


sub read_vcf_header{
    my ($fh) = @_;
    my $vcf = {fh => $fh,
               eof => 0,
               current_line => undef
              };
    while (<$fh>) {
        chomp;
        my $line = $_;
        if ($line =~ /^$/) {
            next;
        }
        ## these are the lines which describe the VCF format fields
        if ($line =~ s/^##//) {
            my ($key,$value) = $line =~ /^([^=]+)=(.+)$/;
            if ($key =~ /^(?:CONTIG|INFO|FORMAT|ALT)$/i) {
                $value =~ /\<ID=([^,]+)/;
                $vcf->{info}{$key}{$1} = $value;
            } else {
                $vcf->{info}{$key} = $value;
            }
        } elsif ($line =~ s/^#//) { ## this is the header of the data
            $vcf->{header} = [split /\t/,$line];
            if (@{$vcf->{header}} < 9) {
                die "Invalid VCF file";
            }
            @{$vcf->{header_order}}{@{$vcf->{header}}} = 0..$#{$vcf->{header}};
            # this is the ordering of the samples in the genotype
            @{$vcf->{sample_order}}{@{$vcf->{header}}[9..$#{$vcf->{header}}]} =
                0..($#{$vcf->{header}}-9);
        } else { ## something else, must be data
            $vcf->{current_line} = $_;
            last;
        }
    }
    return $vcf;
}

sub read_current_line {
    my ($vcf) = @_;
    return 0 if $vcf->{eof};
    if (not defined $vcf->{current_line}) {
        $vcf->{current_line} = $vcf->{fh}->getline();
        if (not defined $vcf->{current_line}) {
            $vcf->{eof} = 1;
            print STDERR "EOF\n";
            return 0;
        }
        chomp $vcf->{current_line};
        $vcf->{current_variant} = undef;
        return 1;
    }
    return 1;
}

sub parse_current_variant {
    my ($vcf) = @_;
    ## there's not a line for us to parse
    if (not defined $vcf->{current_line}) {
        return;
    }
    ## we've already parsed a current variant
    if (defined $vcf->{current_variant}) {
        return;
    }
    my @row = split /\t/,$vcf->{current_line};
    my %row;
    @row{@{$vcf->{header}}[0..8]} = @row[0..8];
    $vcf->{current_variant} = \%row;
    $vcf->{current_variant}{genotypes} = [];
    my @format = split /[;:]/,$vcf->{current_variant}{FORMAT};
    my $genotype_pos = 0;
    for my $i (0..$#format) {
        if ($format[$i] eq 'GT') {
            $genotype_pos = $i;
            last;
        }
    }
    if (defined $genotype_pos) {
        $vcf->{current_variant}{genotypes} =
            [map{my @h = split /[;:]/,$_;
                 $h[$genotype_pos];
             } @row[9..$#row]
            ];
    } else {
        $vcf->{current_variant}{genotypes} = [(undef) x (@row-9)];
    }
    return;
}
## orders samples by name using sort and stores the sample to file
## mapping.
sub determine_sample_ordering {
    my ($vcf_info,$sample_ordering) = @_;
    my %samples;
    for my $i (0..$#{$vcf_info}) {
        my $vcf = $vcf_info->[$i];
        my @samples = @{$vcf->{header}}[9..$#{$vcf->{header}}];
        push @{$samples{$_}},$i for @samples;
    }
    $sample_ordering->{order} = [sort keys %samples];
    $sample_ordering->{mapping} = \%samples;
    print STDERR "determined sample ordering\n" if $DEBUG;
}

sub output_sample_descriptors {
    my ($sample_ordering,$sample_info_output) = @_;
    if (defined $sample_info_output) {
        for my $sample (@{$sample_ordering}) {
            print {$sample_info_output} "$sample\n";
        }
    }
}

sub _chr_cmp {
    my ($a,$b) = @_;
    return 1 if not defined $a;
    if ($a =~ /^\d+$/o) {
        if ($b =~ /\d+$/o) {
            return $a <=> $b;
        } else {
            return 1;
        }
    } else {
        return $a cmp $b;
    }
}

sub output_current_variant {
    my ($vcf_info,$format,$current_variant,
        $sample_ordering,$output,$variant_output)  = @_;
    ## we're going to assume that these files are in the same order.
    ## We'll eventually have to change how this entire program works
    ## and walk through the entire file first to identify offsets, and
    ## then from there identify the variants.

    ## find the chromosome that we should look for
    my $min_chr;
    my @files_in_chr;
    print STDERR "outputting current variant " if $DEBUG;
    for my $i (0..$#{$vcf_info}) {
        if (defined $vcf_info->[$i]{current_variant} and
            defined $vcf_info->[$i]{current_variant}{CHROM}) {
            my $cmp = _chr_cmp($min_chr,$vcf_info->[$i]{current_variant}{CHROM});
            # the new chr is greater than min_chr, ignore it
            if ($cmp == -1) {
                next;
            }
            # the new chr is less than min_chr, clear out all previous
            # results
            if ($cmp == 1) { 
                $min_chr = $vcf_info->[$i]{current_variant}{CHROM};
                @files_in_chr = ();
            }
            # the new chr is equal to min_chr, add it to the file list
            # (note that min_chr was updated above)
            push @files_in_chr,$i;
        }
    }
    print STDERR "chr $min_chr " if $DEBUG;
    my $min_pos;
    my %files_in_pos_and_chr;
    for my $i (@files_in_chr) {
        if (defined $vcf_info->[$i]{current_variant} and
            defined $vcf_info->[$i]{current_variant}{POS}) {
            my $cmp;
            if (not defined $min_pos) {
                $cmp = 1;
            } else {
                $cmp = $min_pos <=> $vcf_info->[$i]{current_variant}{POS};
            }
            if ($cmp == -1) {
                next;
            }
            if ($cmp == 1) {
                $min_pos = $vcf_info->[$i]{current_variant}{POS};
                %files_in_pos_and_chr = ();
            }
            $files_in_pos_and_chr{$i} = 1;
        }
    }
    print STDERR "pos $min_pos " if $DEBUG;
    ## now we know which files have this position, and we know which
    ## samples we need to output; lets output it
    my %files_used;
    my @genotypes;
    for my $i (0..$#{$sample_ordering->{order}}) {
        ## we're going to assume that calls which are not here are
        ## reference; we'll probably have to do something fancier for
        ## real data (maybe NA) to account for areas with lack of
        ## coverage, but for the time being, lets just do this.
#        print STDERR "sample $sample_ordering->{order}[$i] " if $min_pos > 1;
        my @files = grep {$files_in_pos_and_chr{$_}}
            @{$sample_ordering->{mapping}{$sample_ordering->{order}[$i]}};
#        print STDERR "in files @files\n" if $min_pos > 1;
        # p $sample_ordering->{mapping} if $min_pos > 1;
        next unless @files;
        if (@files > 1) {
            die "Multiple files have the same sample identifier at this position".
                " chr $min_chr pos $min_pos $sample_ordering->{order}[$i]";
        }
        $files_used{$files[0]} = 1;
        my $col_pos = $vcf_info->[$files[0]]{sample_order}{$sample_ordering->{order}[$i]};
        my $genotypes = $vcf_info->[$files[0]]{current_variant}{genotypes}[$col_pos];
        next unless defined $genotypes;
        if ($genotypes =~ /^[0\.][\|\/][0\.]$/o) {
            next;
        }
        my $dosage;
        if ($genotypes =~ /^(?:[0\.][\|\/]1|1[\|\/][0\.])$/o) {
            $dosage = 1;
        } elsif ($genotypes =~ /^1[\|\/]1$/o) {
            $dosage = 2;
        } else {
            ## we probably should do something else here, but I'm
            ## going to punt for the time being.
            next;
        }
        push @genotypes,"$col_pos $dosage";
    }
    print STDERR "advancing files @{[sort keys %files_used]} " if $DEBUG > 2;
    for my $i (keys %files_used) {
        $vcf_info->[$i]{current_line} = undef;
    }
    print STDERR "output ".scalar(@genotypes)." variants." if $DEBUG;
    if (@genotypes) {
        print STDERR "\n" if $DEBUG;
    } else {
       print STDERR "\r" if $DEBUG;
    }
    return unless @genotypes;
    print {$output} join(' ',@genotypes)."\n";
    ## what about multiple different variants in the same position?
    ## Need to deal with them

    ## probably just punt on them for now, and then deal with them
    ## later.

    # p $vcf_info;
    if (defined $variant_output) {
        die "not implemented"
    }
}

__END__
